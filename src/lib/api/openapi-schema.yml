openapi: 3.0.0
info:
  title: Collaborative Organizer for Files & Folders and Extraction Editor (COFFEE) API
  version: 1.0.0
  description: API for managing files and user settings. \
   This API allows users to create, read, update, and delete files, \
   as well as manage their settings. Users can also view their file index, \
   and update their file index. The user can login with Google OAuth and create an account. \
   The account user is checked if the user is allowed to edit this file. Files can have sharing \
   modes to allow users to share files with other users. The user can also view the file history \
   and update the file history. The user can also view the file content and update the file content. \
   The user can also view the user settings and update the user settings. \ 
   Alternative to Wikipedia MediaWiki API, Google Drive API, Microsoft OneDrive API  
  

servers:
  - url: https://api.example.com/v1

paths:
  /files:
    get:
      summary: Get all files
      responses:
        '200':
          description: Successful response
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
    post:
      summary: Create a new file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFile'
      responses:
        '201':
          description: File created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'

  /files/{fileId}:
    get:
      summary: Get a file by ID
      parameters:
        - in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
    put:
      summary: Update a file
      parameters:
        - in: path
          name: fileId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileUpdate'
      responses:
        '200':
          description: File updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
    delete:
      summary: Delete a file
      parameters:
        - in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: File deleted successfully

  /users/{userId}/settings:
    get:
      summary: Get user settings
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
    put:
      summary: Update user settings
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'

  /users/{userId}/files:
    get:
      summary: Get user's file index
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    put:
      summary: Update user's file index
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [add, remove]
                fileId:
                  type: string
      responses:
        '200':
          description: File index updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

components:
  schemas:
    File:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        users:
          type: array
          items:
            type: string
        lastUpdated:
          type: string
          format: date-time

    NewFile:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        users:
          type: array
          items:
            type: string

    FileUpdate:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        users:
          type: array
          items:
            type: string

    UserSettings:
      type: object
      additionalProperties: true
      example:
        theme: "dark"
        fontSize: 14